dir.create(file.path('testdir2','testdir3'), recursive=TRUE)
setwd(old.dir)
unlink('testdir')
unlink("testdir",recursive=TRUE)
1:20
pi:10
15:1
?:
':'
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq.along(my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect = [0.5,55,-10,6]
num_vect <- (0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect<1
tf
num_vect>=6
c("My", "name", "is")
my_char <- char("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse =" ")
my_name  = c(my_char, "Abhinay")
my_name
paste(my_name,collapse=" ")
paste("Hello", "world!",sep =" ")
paste(1:3,c("X","Y","Z"),sep ="")
paste("LETTERS",1:4, sep="-")
paste(LETTERS,1:4, sep="-")
x<-c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_date <- sample(c(y,z),100)
my_data <- sample(c(y,z),100)
my_na = is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(X) & x >0]
x[!is.na(x) & x >0]
c(x)
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 = c(11,2,NA)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
NA ==NA
vect["bar"]
vect[c("foo","bar")]
1:20
my_vector <- 1:20
my_vector
dim(my_vector)
?attr
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 = matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gine", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "rating", "test")
cnames <- c("patient", "age", "weight", "bp",rating", "test")
cnames <- c("patient", "age", "weight", "bp","rating", "test")
colnames(my_data) <- cnames
my_data
?clear
cat("\014")
cat()
?delete
??delete
??clear
cat("\014")
packages()
load(packages)
?packages
??packages
install.packages()
pkgs
installed.packages()
cat("\014")
kul
cat("\014")
"\014"
"\020"
"\20"
swirl()
library(swirl)
swirl()
for (i in 1:10){}
for (i in 1:10){print(i)}
x <- c("a","b","c","d")
for (i in 1:4){print(x[i])}
for (i in seq_along(x){print(x[i])}
for (letter in x {print(letters)}
for (letter in x ){print(letters)}
for (letter in x ){print(letter)}
ls()
letters
x <- matrix(1:6,2,3)
x
nrow(x)
while (count<10){print(count)}
while (
)
while(count <10){
print(count)
count <- count+1
}
count  =0
while(count <10){
print(count)
count <- count+1
}
z <- 5
while (z>=3 && z<=10){
print(z)
coin <- rbinom(1,1,0.5)
if(coin==1)
}
cat[\014]
cat["\014"]
cat[\f]
x+y
x+y
x+y}
add2 <- function{(x,y) {
x+y
}
add2 <- function{(x,y) {
x+y
}
add2 <- function{(x,y) {
x+y
}
add2 <- function{(x,y) {
x+y
}
add2 <- function{(x,y) {
x+y
}
add2 <- function{(x,y) {
x+y
}
add2 <- function{(x,y) {
x+y
}
add2 <- function{(x,y){
x + y
}
add2 <- function{(x,y){
x + y
}
add2 <- function{(x,y){
x + y
}
add2 <- function{(x,y){
x + y
}
{
x + y
}
{
x + y
}
{
x + y
}
j
2+67
add2 <- function(x, y) {
x + y
}
add2(4,5)
add2(k,w)
add2("k","2")
k
above10 <- function(x) {
use <- x>10
x[use]
}
x = [1,2,15,16]
above10(x)
x
x = [1,2,4]
x = [1,2,4]
x
xy = [1,2,3]
xy = c(1,2,3)
above10(xy)
xy = c(1,20,3)
above10(xy)
log(10)
log(e)
log(exp(1))
log2
log(2)
?log
log10(2)
log10(3)
?import
??import
search()
str(sapply)
mapply(mean,1:5,5:1)
rnorm
mapply(rnorm,1:5,5:1)
mapply(rep,1:5,5:1)
swirl()
library(swirl)
swirl()
info()
main()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
as.list(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.chacaracter(cls_list)
as.character(cls_list)
?sapply
?sapply
sapply(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flag$orange)
sum(flags$orange)
flags_colors <- flags[,11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range())
lapply(flag_shapes,range)
shape_mat = sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6,6,))
unique(c(3,4,5,5,5,6,6,6))
unique(c(3,4,5,5,5,6,6))
lapply(flags,unique)
unique_vals = lapply(flags,unique)
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elm) elm[2])
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
library(datasets)
data("iris")
data(iris)
?iris
iris
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
sapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?split
k = split(mtcars$mpg,mtcars$cyl)
k
k = split(mtcars$cyl,mtcars$mpg)
k
split(mtcars, mtcars$cyl)
sapply(mtcars,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
class(tapply(mtcars$hp,mtcars$cyl,mean))
k=tapply(mtcars$hp,mtcars$cyl,mean)
k[1]
k[3]-k[1]
ls <- function(x) { x^2}
debug(ls)
ls(2)
asd
casdas
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
m = matrix(1:100,10,10)
m
solve(m)
m[1,1]=0
m
solve(m)
m[2,2] = 1
m = [1:4,2,2]
m = matrix(1:4,2,2)
m
m[1,1] =0
m
solve(m)
m*solve(m)
m
k = solve(m)
? matrix multiplication
?? matrix multiplication
m %*% k
m## Return a matrix that is the inverse of 'x'
cachesolve(m)
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <-x$get()
m <-solve(data,...)
x$setinverse(m)
m## Return a matrix that is the inverse of 'x'
}
getwd
setwd
getwd()
setwd("Desktop")
getwd()
cacheSolve(m)
m
cacheSolve(m)
x = makeCacheMatrix(m)
getwd()
setwd("Programmingassignment2")
getwd()
if(!is.nullca(m)){
message("getting cached data")
return(m)
}
if(!is.null(m)){
message("getting cached data")
return(m)
}
x = makeCacheMatrix(m)
m## Return a matrix that is the inverse of 'x'
getwd()
makeCacheMatrix(m)
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <-x$get()
m <-solve(data,...)
x$setinverse(m)
m## Return a matrix that is the inverse of 'x'
}
m
m
m
k
cacheSolve(k)
makeCacheMatrix(k)
makeCacheMatrix(k)
makeCacheMatrix(k)
getwd()
ls
Lst
lst
all.files
list.files("ProgrammingAssignment2")
setwd("Desktop")
getwd()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <-NULL
set <- function(y) {
x<<-y
m<<-NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list (set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <-x$get()
m <-solve(data,...)
x$setinverse(m)
m## Return a matrix that is the inverse of 'x'
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <-NULL
set <- function(y) {
x<<-y
m<<-NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list (set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <-x$get()
m <-solve(data,...)
x$setinverse(m)
m## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix()
makeCacheMatrix(m)
makeCacheMatrix(m)
cacheSolve(m)
source('~/Desktop/ProgrammingAssignment2/cachematrix.R')
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a <- diag(5,3)
a
CachedMarix <- makeCacheMatrix(a)
cacheSolve(CachedMarix)
source('~/Desktop/ProgrammingAssignment2/cachematrix.R')
